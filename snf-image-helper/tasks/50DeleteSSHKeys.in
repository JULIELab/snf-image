#! /bin/bash

# Copyright (C) 2011-2015 GRNET S.A.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

### BEGIN TASK INFO
# Provides:		DeleteSSHKeys
# RunBefore:            EnforcePersonality
# RunAfter:             FilesystemResizeMounted
# Short-Description:	Remove ssh keys and in some cases recreate them
### END TASK INFO

set -e
. "@commondir@/common.sh"

task_init_as excludable mounted_excludable overwritable

if [[ "$SNF_IMAGE_PROPERTY_OSFAMILY" =~ ^windows ]]; then
    exit 0
fi

if [ "$SNF_IMAGE_PROPERTY_OSFAMILY" = "linux" ]; then
    distro=$(get_base_distro "$SNF_IMAGE_TARGET")
fi

HOST_KEY="/etc/ssh/ssh_host_key"
RSA_KEY="/etc/ssh/ssh_host_rsa_key"
DSA_KEY="/etc/ssh/ssh_host_dsa_key"
ECDSA_KEY="/etc/ssh/ssh_host_ecdsa_key"
ED25519_KEY="/etc/ssh/ssh_host_ed25519_key"

target="$SNF_IMAGE_TARGET"

if [ "x$distro" = "xdebian" ]; then
    mount -o bind /proc "$target/proc"
    add_cleanup umount "$target/proc"
    mount -o bind /dev "$target/dev"
    add_cleanup umount "$target/dev"
    # Make sure that doing dpkg-reconfigure openssh-server will not try to
    # start the service
    if [ -f "$target/usr/sbin/policy-rc.d" ]; then
        tmp="$target/usr/sbin/policy-rc.d.snf_image-$RANDOM"
        mv "$target/usr/sbin/policy-rc.d" "$tmp"
        add_cleanup mv "$tmp" "$target/usr/sbin/policy-rc.d"
    fi
    echo exit 101 > "$target/usr/sbin/policy-rc.d"
    chmod +x "$target/usr/sbin/policy-rc.d"
    add_cleanup rm -f "$target/usr/sbin/policy-rc.d"
fi

# Remove the default keys
rm -v -f "$target"/etc/ssh/ssh_host_*

# For Debian/Ubuntu we need to recreate them
if [ "x$distro" = "xdebian" ]; then
    # This check will still succeed, if the package is deinstalled but not
    # purged, but let's stop being too paranoid...
    if grep "Package: openssh-server"  "$target/var/lib/dpkg/status" &> /dev/null; then
        chroot "$target" \
            env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
            dpkg-reconfigure -fnoninteractive -pcritical openssh-server
    fi
fi

config="$target/etc/ssh/sshd_config"
if [ ! -e "$config" ]; then
    warn "Config file: \`$config' is missing."
    warn "Can't check for non-default keys."
    exit 0
fi

# Remove non-default keys...
{ grep ^HostKey "$config" || true; } | while read key_line; do
    key=$(echo $key_line | cut -d" " -f2)
    if [ "$key" = $HOST_KEY -o "$key" = $RSA_KEY -o \
            "$key" = $DSA_KEY -o "$key" = $ECDSA_KEY -o "$key" = $ED25519_KEY ]; then
        continue
    fi

    if [ "x$distro" = "xdebian" ]; then
        # Most distros recreate missing keys but Debian complains
        type=""
        if [ -e "$target/$key" ]; then
            if grep -e "-----BEGIN DSA PRIVATE KEY-----" "$target/$key" > /dev/null; then
                type=dsa
            elif grep -e "-----BEGIN EC PRIVATE KEY-----" "$target/$key" > /dev/null; then
                type=ecdsa
            elif grep -e "-----BEGIN RSA PRIVATE KEY-----" "$target/$key" > /dev/null; then
                type=rsa
            elif grep -e "-----BEGIN OPENSSH PRIVATE KEY-----" "$target/$key" > /dev/null; then
                type=ed25519
            elif grep -e "SSH PRIVATE KEY FILE FORMAT" "$target/$key" > /dev/null; then
                type=rsa1
            fi
        else # do some guessing...
            for i in rsa dsa ecdsa ed25519; do
                if [[ "$key" =~  _${i}_ ]]; then
                    type="$i";
                    break;
                fi
            done
        fi
        if [ -z "$type" ]; then
            echo "Warning: Unknown key type. I'll use \`rsa1'";
            type=rsa1
        fi

        rm -f "$target/$key"{,.pub}
        chroot "$target" \
            env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
            ssh-keygen -t $type -q -N '' -f "$key"
    else
        rm -f "$target/$key"{,.pub}
    fi
done

exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
