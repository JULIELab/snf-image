#!/bin/bash

# Copyright (C) 2011 GRNET S.A. 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

. @commondir@/common.sh

set -e

if [ "x$1" != "x--force" ]; then
    echo "WARNING: Exiting, this command would cause the system to halt." >&2
    echo "Use --force if you know what you're doing." >&2
    exit 1
fi

# terminate helper vm when the script exits
add_cleanup telinit 0

if [ ! -b "$FLOPPY_DEV" ]; then
    log_error "Floppy device is not present!"
fi

floppy=$(mktemp -d --tmpdir floppy.XXXXXX)
add_cleanup rmdir "$floppy"

mount $FLOPPY_DEV $floppy
add_cleanup umount "$floppy"

if [ -f "$floppy/rules" ]; then
    source "$floppy/rules"
else
    log_error "Floppy does not contain \`rules\' file"
fi

if [ -n "$SNF_IMAGE_PROPERTIES" ]; then
    properties=$(mktemp --tmpdir properties.XXXXXX)
    add_cleanup rm "$properties"
    echo "$SNF_IMAGE_PROPERTIES" |
        "@scriptsdir@/decode-properties.py" "$properties"
    source "$properties"
fi

# Image mount point...
target=$(mktemp -d --tmpdir target.XXXXXX)
add_cleanup rmdir "$target"

export SNF_IMAGE_TARGET="$target"
export SNF_IMAGE_RESIZE_PART="$(get_last_partition_id "$SNF_IMAGE_DEV")"

if [ ! -d "@tasksdir@" ]; then
    log_error "snf-image/tasks directory is missing"
fi

RUN_PARTS=$(which run-parts)
if [ -z "$RUN_PARTS" ]; then
    log_error "run-parts program is missing from the system"
fi

# If something goes wrong with the tasks, try to umount the target filesystem
# in case it is left mounted...
trap '{ umount "$target"; }' ERR

if [ -z "$SNF_IMAGE_PROPERTY_EXCLUDE_ALL_TASKS" ]; then

    if [[ ! "$SNF_IMAGE_PROPERTY_OSFAMILY" =~ ^(linux|windows)$ ]]; then
        log_error "Supported values for OSFAMILY property are: linux|windows"
    fi

    # Redirect standard error to standard output,
    # prepend a timestamp before each line of output.
    echo "Execute all snf-image tasks...."
    $RUN_PARTS -v --exit-on-error "@tasksdir@" 2>&1|
        while IFS= read -r line; do
            echo $(date +%Y:%m:%d-%H:%M:%S.%N) "$line"
        done
fi

# Disable the trap. If code reaches here, the filesystem is unmounted.
trap - ERR

echo "SUCCESS" > "$RESULT"

cleanup
trap - EXIT

# never called...
exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
