#!/bin/bash

# Copyright (C) 2011-2015 GRNET S.A.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e
set -o pipefail

. common.sh

ganeti_os_main

parameter_check

IMAGE_NAME="$IMG_ID"
IMAGE_TYPE="$IMG_FORMAT"

if [ "$IMAGE_DEBUG" = "yes" ]; then
    PS4='$(date "+%s.%N ($LINENO) + ")'
    set -x
elif [ "$IMAGE_DEBUG" != "no" ]; then
    log_warning "Unsupported IMAGE_DEBUG value: \`$IMAGE_DEBUG'"
fi

if [ "$CLOUD_INIT_DEBUG" = "yes" ]; then
    snf_export_CLOUD_INIT_DEBUG="$CLOUD_INIT_DEBUG"
elif [ "$CLOUD_INIT_DEBUG" != "no" ]; then
    log_warning "Unsupported CLOUD_INIT_DEBUG value: \`$CLOUD_INIT_DEBUG'"
fi

monitor_pipe=$(mktemp -u)
mkfifo -m 600 "$monitor_pipe"
add_cleanup rm -f "$monitor_pipe"

if [ -n "$PROGRESS_MONITOR" ]; then
    { sleep 1; $PROGRESS_MONITOR "$instance" < "$monitor_pipe" ; } &
    monitor_pid="$!"
else
    sed -u 's|^|[MONITOR] |g' < "$monitor_pipe" &
    monitor_pid="$!"
fi

# Create file descriptor to monitor_pipe
exec {MONITOR_FD}>${monitor_pipe}
add_cleanup  close_fd ${MONITOR_FD}

# Ignore sigpipe signals. If progress monitor is dead and snf-image tries to
# output something to the opened pipe, then a sigpipe will be raised. If we do
# not catch this, the program will terminate.
trap "" SIGPIPE

trap report_and_cleanup EXIT

echo "Processing image with ID: \`$IMG_ID' and type: \`$IMAGE_TYPE'" >&2

src_backend=$(get_backend src "$IMG_ID")
echo "Using source backend: $src_backend" >&2
dst_backend=$(get_backend dst "$disk0")
echo "Using destination backend: $dst_backend" >&2
size=$($src_backend -s "$IMG_ID")
mbr=$(create_mbr "$size" "$IMAGE_TYPE")

report_info "Starting image copy..."
# 64K is the size of the pipe buffer. This is probably the best value for bs
{ cat "$mbr"; $src_backend "$IMG_ID"; } |
    ./copy-monitor.py -o $MONITOR_FD -r $size $DD bs=4M iflag=fullblock |
    $dst_backend "$disk0"
report_info "Image copy finished."

# Create a floppy image
floppy=$(mktemp --tmpdir floppy.XXXXXX)
add_cleanup rm "$floppy"

snf_export_TYPE="$IMG_FORMAT"
snf_export_HOSTNAME="$instance"
snf_export_DHCP_TAGS="$DHCP_TAGS"
snf_export_STATEFUL_DHCPV6_TAGS="$STATEFUL_DHCPV6_TAGS"
snf_export_STATELESS_DHCPV6_TAGS="$STATELESS_DHCPV6_TAGS"
snf_export_DEFAULT_NIC_CONFIG="$DEFAULT_NIC_CONFIG"

if [ -n "${IMG_PASSWD+dummy}" ]; then
    snf_export_PASSWD="$IMG_PASSWD"
fi

if [ -n "${IMG_PASSWD_HASH+dummy}" ]; then
    snf_export_PASSWD_HASH="$IMG_PASSWD_HASH"
fi

if [ -n "$IMG_PROPERTIES" ]; then
    snf_export_PROPERTIES="$IMG_PROPERTIES"
fi

if [ -n "$INST_PROPERTIES" ]; then
    snf_export_INST_PROPERTIES="$INST_PROPERTIES"
fi

if [ -n "$IMG_PERSONALITY" ]; then
    snf_export_PERSONALITY="$IMG_PERSONALITY"
fi

if [ -n "${OS_PRODUCT_KEY+dummy}" ]; then
    snf_export_OS_PRODUCT_KEY="$OS_PRODUCT_KEY"
fi

if [ -n "${AUTH_KEYS+dummy}" ]; then
    snf_export_AUTH_KEYS="$AUTH_KEYS"
fi

if [ -n "${CLOUD_USERDATA+dummy}" ]; then
    snf_export_CLOUD_USERDATA="$CLOUD_USERDATA"
fi

assign_disk_devices_to snf_export_DEV

create_floppy "$floppy"

launch_helper "$floppy"

report_info "Image customization finished successfully."

# Execute cleanups
cleanup
trap - EXIT

exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
