#!/bin/bash

# Copyright (C) 2017 GRNET S.A.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

source @osdir@/common.sh

init_backend dst "$@"

: ${QEMU_NBD:=qemu-nbd}

map_uri() {
    # Use qemu-nbd to map a URL to a block device
    local disk bdev max i rc

    disk="$1"

    # FIXME: we probably need to check if NBD is compiled as a module.
    modprobe nbd # just to be on the safe side

    if [ -f /sys/module/nbd/parameters/nbds_max ]; then
        max=$(</sys/module/nbd/parameters/nbds_max)
    else
        log_error "NBD module is not loaded correctly"
        exit 1
    fi

    for ((i=0; i<max; i++)); do
        set +e
        $QEMU_NBD -f raw -c "/dev/nbd$i" "$disk"
        rc=$?
        set -e
        if [ $rc -eq 0 ]; then
            break
        else
            log_warning "Unable to map \`$disk' to /dev/nbd$i"
        fi
    done

    if [ $i -eq $max ]; then
        log_error "Could not find suitable NBD device to map: \`$disk'"
        exit 1
    fi

    echo "/dev/nbd$i"
}

unmap_uri() {
    local bdev
    bdev="$1"

    if [[ -b "$bdev" && "$bdev" = /dev/nbd* ]]; then
        $QEMU_NBD -d "$bdev"
    else
        log_warning "Cannot unmap: ${bdev}. File does not exist"
    fi
}

# From qemu's Device URL Syntax

ISCSI=iscsi
NBD=nbd
SSH=ssh
SHEEPDOG='sheepdog(\+tcp|\+unix)?'
GLUSTERFS='gluster(\+tcp|\+unix|\+rdma)?'
NETWORK='http|https|ftp|ftps|tftp'
RBD=rbd

URL_REGEXP="^($ISCSI|$NBD|$SSH|$SHEEPDOG|$GLUSTERFS|$NETWORK|$RBD):"

if [ "$PROBE" = yes ]; then

    if [[ "$URL" =~ $URL_REGEXP ]]; then
        echo yes
    else
        echo no
    fi
    exit 0
fi

if [ "$SIZE" = yes ]; then
    # not supported
    exit 1
fi

MAPPED=$(map_uri "$URL")
add_cleanup unmap_uri "$MAPPED"

$DD iflag=fullblock oflag=direct of="$MAPPED" bs=1M

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
