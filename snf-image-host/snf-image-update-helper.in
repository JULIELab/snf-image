#!/bin/bash

# Copyright (C) 2011 GRNET S.A. 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e
set -o pipefail
set -o errtrace

. @osdir@/common.sh

usage() {
    local rc="$1"

    cat <<EOF

Usage: $0 [options]

This script runs a debootstrap and creates a small Debian image populated with
the snf-image-helper package. This needs to be done before the first use of
ganeti's \`snf-image' guest OS type.

OPTIONS:
    -d DIRECTORY
        Use this directory to host the created files, instead of the default
        [default: $HELPER_DIR]

    -h  Print this message

    -p PACKAGE
        Install this deb package in the helper image, instead of the default
        [default: $HELPER_PKG]

    -r  Don't use any existing cache

    -y  Assume Yes to all queries and do not prompt

EOF

    exit "$rc"
}

while getopts "d:hp:ry" opt; do
    case $opt in
        d) HELPER_DIR="$OPTARG"
            ;;
        h) usage 0
            ;;
        p) HELPER_PKG="$OPTARG"
            ;;
        r) NO_CACHE="yes"
            ;;
        y) NO_PROMPT="yes"
            ;;
        ?) log_error "Use \`-h' for help"; exit 1
            ;;
    esac
done

echo
echo "This is the update helper image script for snf-image."
echo "If you don't know what to do, use \`-h'."
echo

if [ ! -d "$HELPER_DIR" -o ! -w "$HELPER_DIR" ]; then
    log_error "ERROR:"
    log_error "Helper directory \`$HELPER_DIR' does not exist or the script" \
    "has no write permission on it."
    exit 1
fi

if [ ! -r "$HELPER_PKG" ]; then
    log_error "ERROR:"
    log_error "Helper package \`$HELPER_PKG' does not exist or is not" \
    "readable by the script."
    exit 1
fi

if [ ! -e "$MULTISTRAP_CONFIG" ]; then
    log_error "ERROR:"
    log_error "Multistrap configuration file: \`$MULTISTRAP_CONFIG' does not" \
    "exist or is not readable by the script."
    exit 1
fi

cat >&1 <<EOF
This program will overwrite the following files if present:
  \`$HELPER_DIR/initrd'
  \`$HELPER_DIR/kernel'
  \`$HELPER_DIR/image'
EOF

while [[ 1 ]]; do
    echo -n "Do you want to continue [y/N]? "
    if [ "x$NO_PROMPT" = "xyes" ]; then
        echo "y";
        break;
    fi

    read answer
    [ "$(echo -n "$answer" | tr [A-Z] [a-z])" = "y" ] && break
    if [ -z "$answer" -o "$(echo -n "$answer" | tr [A-Z] [a-z])" = "n" ]; then
        log_error "Abort."
        exit 1
    fi
done

rm -f "$HELPER_DIR/initrd" "$HELPER_DIR/kernel" "$HELPER_DIR/image"

echo -n "Allocating space for helper disk image..."
helper_img=$(mktemp "$HELPER_DIR/image.XXXXXX")
trap "$(printf "rm -r %q" "${helper_img}")" ERR

dd if=/dev/zero of="$helper_img" bs=1k count=500000 &> /dev/null
echo "done"

echo "Creating partitions..."
blockdev=$("$LOSETUP" -sf $helper_img)
add_cleanup "$LOSETUP" -d "$blockdev"

sleep 1 # sometimes losetup returns and the device is still busy..

format_disk0 "$blockdev" "extdump"  2>&1 | sed -e 's/^/CFDISK: /g'

root_dev=$(map_disk0 "$blockdev")-1
add_cleanup unmap_disk0 "$blockdev"

echo Creating and configuring filesystem...
mkfs.ext3 "$root_dev" 2>&1 | sed -e 's/^/MKFS.EXT3: /g'
# The helper vm should never do filesystem checks...
tune2fs -i 0 -c 0 "$root_dev" 2>&1 | sed -e 's/^/TUNE2FS: /g'

target=$(mktemp -d)
add_cleanup rmdir "$target"

mount "$root_dev" "$target"
add_cleanup umount "$root_dev"

echo -n "Checking for cached root filesystem in \`$HELPER_CACHE_DIR'..."
if [ "$NO_CACHE" == "yes" ]; then
    echo "don't use cache (option -r applied)"
    do_multistrap "$target" "$HELPER_CACHE_DIR/root.tar" "$HELPER_CACHE_DIR/packages"
elif [ -f "$HELPER_CACHE_DIR/root.tar" ]; then
    echo "found"

    missing_pkgs="no"
    echo -n "Checking if needed packages are present..."
    if [ ! -f "$HELPER_CACHE_DIR/packages" ]; then
        missing_pkgs="yes"
        echo "packages file: \`$HELPER_CACHE_DIR/packages' does not exist"
    else
        extra_pkgs=$(grep ^packages= "$MULTISTRAP_CONFIG" | cut -d= -f2 | tr  '\n' ' ')
        for pkg in $extra_pkgs; do
            if ! grep "^$pkg\$" "$HELPER_CACHE_DIR/packages" > /dev/null; then
		missing_pkgs="yes"
                echo "$pkg is missing."
                break
            fi
        done
        if [ "$missing_pkgs" == "no" ]; then
            echo "done"
        fi
    fi
    if [ "$missing_pkgs" == "yes" ]; then
            do_multistrap "$target" "$HELPER_CACHE_DIR/root.tar" "$HELPER_CACHE_DIR/packages"
    fi

    test "$missing_pkgs" == "no" && while [[ 1 ]]; do
        echo -n "Use the cached file [Y/n]? "
        if [ "x$NO_PROMPT" = "xyes" ]; then
            echo "y";
            break;
        fi

        read answer
    
        if [ -z "$answer" -o "$(tr [A-Z] [a-z] <<< "$answer")" = "y" ]; then
            break;
        elif [ "$(tr [A-Z] [a-z] <<< "$answer" )" = "n" ]; then
            do_multistrap "$target" "$HELPER_CACHE_DIR/root.tar" "$HELPER_CACHE_DIR/packages"
            break;
        fi
    done

else
    echo "not found"
    do_multistrap "$target" "$HELPER_CACHE_DIR/root.tar" "$HELPER_CACHE_DIR/packages"
fi

tar xf "$HELPER_CACHE_DIR/root.tar" -C "$target"

echo -n "Configuring the helper image..."
echo snf-image-helper > "$target/etc/hostname"

cat > "$target/etc/fstab" <<EOF
# /etc/fstab: static file system information.
#
# <file system>   <mount point>   <type>  <options>       <dump>  <pass>
/dev/sda1         /               ext3    defaults        0       1
proc              /proc           proc    defaults        0       0
EOF
echo "done"

echo -n "Extracting kernel..."
if [ ! -L "$target/vmlinuz" -o ! -L "$target/vmlinuz" ]; then
    echo -e "\033[1;31mfailed\033[0m"
    log_error "vmlinuz or initrd.img link in root is missing."
    log_error "I don't know how to find a usable kernel/initrd pair."
    exit 1
fi
echo "done"

kernel="$target/$(chroot "$target" readlink -en /vmlinuz)"
initrd="$target/$(chroot "$target" readlink -en /initrd.img)"

echo "Moving $(basename "$kernel") and $(basename "$initrd") to \`$HELPER_DIR'"
cp "$kernel" "$initrd" "$HELPER_DIR"

kernel=$(basename "$kernel")
initrd=$(basename "$initrd")

(cd "$HELPER_DIR"; ln -fs "$kernel" kernel; ln -fs "$initrd" initrd)

rm "$target/vmlinuz" "$target/initrd.img"

echo "Installing snf-image-helper pkg in the new image..."
cp "$HELPER_PKG" "$target/tmp/"
pkg_name=$(basename "$HELPER_PKG")
add_cleanup rm "$target/tmp/$pkg_name"
chroot "$target" dpkg -i "/tmp/$pkg_name" 2>&1 | sed -e 's/^/DPKG: /g'

cleanup

mv "$helper_img" "$HELPER_DIR/image"

trap - EXIT

echo "Files in \`$HELPER_DIR' were updated successfully"
exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
