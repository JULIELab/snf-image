#!/bin/bash

set -e
set -o pipefail

. @osdir@/common.sh

if [ ! -e "$HELPER_PKG" ]; then
    log_error "Helper package \`$HELPER_PKG' not found."
    log_error "You need to provide this for the script to work."
    exit 1
fi

cat >&1 <<EOF
This program will overwrite the following files:
  \`$HELPER_DIR/initrd'
  \`$HELPER_DIR/kernel'
  \`$HELPER_DIR/image'
EOF

while [[ 1 ]]; do
    echo -n "Do you want to continue [y/N]? "
    read answer
    [ "$(echo -n "$answer" | tr [A-Z] [a-z])" = "y" ] && break
    if [ -z "$answer" -o "$(echo -n "$answer" | tr [A-Z] [a-z])" = "n" ]; then
        log_error "Abort."
        exit 1
    fi
done

rm -f "$HELPER_DIR/initrd" "$HELPER_DIR/kernel" "$HELPER_DIR/image"

echo -n "Allocating space for helper disk image..."
helper_img=$(mktemp "$HELPER_DIR/image.XXXXXX")

dd if=/dev/zero of="$helper_img" bs=1k count=400000 &> /dev/null
echo "done"

echo "Creating partitions..."
blockdev=$("$LOSETUP" -sf $helper_img)
add_cleanup "$LOSETUP" -d "$blockdev"

sleep 1 # sometimes losetup returns and the device is still busy..

format_disk0 "$blockdev" "extdump"  2>&1 | sed -e 's/^/CFDISK: /g'

root_dev=$(map_disk0 "$blockdev")-1
add_cleanup unmap_disk0 "$blockdev"

echo Creating and configuring filesystem...
mkfs.ext3 "$root_dev" 2>&1 | sed -e 's/^/MKFS.EXT3: /g'
# The helper vm should never do filesystem checks...
tune2fs -i 0 -c 0 "$root_dev" 2>&1 | sed -e 's/^/TUNE2FS: /g'

target=$(mktemp -d)
add_cleanup rmdir "$target"

mount "$root_dev" "$target"
add_cleanup umount "$root_dev"

echo -n "Checking for cached root filesystem file \`$HELPER_CACHE_FILE'..." 
if [  -f "$HELPER_CACHE_FILE" ]; then
    echo "found"
    tar xf "$HELPER_CACHE_FILE" -C "$target"
else
    echo "not found"
    echo "Debootstraping to create a new root filesystem:"

    # Create a policy-rc.d file to deny init script execution
    mkdir -p "$target/usr/sbin"
    cat > "$target/usr/sbin/policy-rc.d" <<EOF
#!/bin/sh
exit 101
EOF
    chmod +x "$target/usr/sbin/policy-rc.d"

    debootstrap --arch amd64 --include "$HELPER_EXTRA_PKGS" \
        --variant=minbase stable "$target" "$HELPER_MIRROR" 2>&1 | sed -e 's/^/DEBOOTSTRAP: /g'

    rm "$target/usr/sbin/policy-rc.d"
    
    # remove the downloaded debs, as they are no longer needed
    find "$target/var/cache/apt/archives" -type f -name '*.deb' -print0 | \
        xargs -r0 rm -f

    tmp_cache=$(mktemp "$HELPER_CACHE_FILE.XXXXXX")
    tar cf "$tmp_cache" --one-file-system -C "$target" . || { rm "$tmp_cache"; false; }
    mv -f "$tmp_cache" "$HELPER_CACHE_FILE"
fi

echo -n "Configuring the helper image..."
echo snf-image-helper > "$target/etc/hostname"

cat > "$target/etc/fstab" <<EOF
# /etc/fstab: static file system information.
#
# <file system>   <mount point>   <type>  <options>       <dump>  <pass>
/dev/sda1         /               ext3    defaults        0       1
proc              /proc           proc    defaults        0       0
EOF
echo "done"

echo -n "Extracting kernel..."
if [ ! -L "$target/vmlinuz" -o ! -L "$target/vmlinuz" ]; then
    echo -e "\033[1;31mfailed\033[0m"
    log_error "vmlinuz or initrd.img link in root is missing."
    log_error "I don't know how to find a usable kernel/initrd pair."
    exit 1
fi
echo "done"

kernel=$(readlink -en "$target/vmlinuz")
initrd=$(readlink -en "$target/initrd.img")

echo "Moving $(basename "$kernel") and $(basename "$initrd") to \`$HELPER_DIR'"
mv "$kernel" "$initrd" "$HELPER_DIR"

kernel=$(basename "$kernel")
initrd=$(basename "$initrd")

(cd "$HELPER_DIR"; ln -fs "$kernel" kernel; ln -fs "$initrd" initrd)

rm "$target/vmlinuz" "$target/initrd.img"

echo "Installing snf-image-helper pkg in the new image..."
cp "$HELPER_PKG" "$target/tmp/"
pkg_name=$(basename "$HELPER_PKG")
add_cleanup rm "$target/tmp/$pkg_name"
chroot "$target" dpkg -i "/tmp/$pkg_name" 2>&1 | sed -e 's/^/DPKG: /g'

cat > "$target/etc/rc.local" <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

if ! grep -q snf_image_activate_helper /proc/cmdline; then
    echo "WARNING: NOT calling snf-image-helper, add snf_image_activate_helper"
    echo "to the kernel command line if you want to do so."
else
    /usr/bin/snf-image-helper --force
fi

exit 0
EOF

chmod +x "$target/etc/rc.local"

echo "done"

cleanup

mv "$helper_img" "$HELPER_DIR/image"

trap - EXIT

echo "Files in \`$HELPER_DIR' were updated successfully"
exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
