#!/bin/bash

# Copyright (C) 2011-2017 GRNET S.A.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e
set -o pipefail
set -o errtrace

. @osdir@/common.sh

usage() {
    local rc="$1"

    cat <<EOF

Usage: $0 [options] <snf-image-helper-pkg>

This script runs multistrap and creates a small Debian image populated with
the snf-image-helper package. This image is needed for Ganeti's \`snf-image'
guest OS type to work.

OPTIONS:
    -d DIRECTORY
        Use this directory to host the created files, instead of the default
        [default: $HELPER_DIR]

    -h  Print this message

    -n Don't shrink the resulting image (useful when debugging)

    -y  Assume Yes to all queries and do not prompt

EOF

    exit "$rc"
}

while getopts "d:hny" opt; do
    case $opt in
        d) HELPER_DIR="$OPTARG"
            ;;
        h) usage 0
            ;;
        n) NO_SHRINK="yes"
            ;;
        y) NO_PROMPT="yes"
            ;;
        ?) log_error "Use \`-h' for help"; exit 1
            ;;
    esac
done

if [ $# -ne 1 ]; then
    log_error "snf-image-helper pkg not provided!"
    usage 1
else
    HELPER_PKG=$1
    shift
fi

if [ -n "$HELPER_PKG" ]; then
    if [ ! -f "$HELPER_PKG" ]; then
        log_error "File: \`$HELPER_PKG' does not exist"
        exit 1
    fi
    set +e
    name=$(dpkg-deb -W --showformat='${Package}\n' "$HELPER_PKG" 2> /dev/null)
    ret=$?
    set -e
    if [ $ret -ne 0 ]; then
        log_error "File \`$HELPER_PKG' is not a debian package"
        exit 1
    fi

    if [ "$name" != snf-image-helper ]; then
        log_error "File \`$HELPER_PKG' is not an snf-image-helper package"
        exit 1
    fi
fi

echo
echo "This is the helper image creation script for snf-image."
echo "If you don't know what to do, use \`-h'."
echo

if [ ! -d "$HELPER_DIR" -o ! -w "$HELPER_DIR" ]; then
    log_error "Helper directory \`$HELPER_DIR' does not exist or the script" \
    "has no write permission on it."
    exit 1
fi

if [ ! -e "$MULTISTRAP_CONFIG" ]; then
    log_error "Multistrap configuration file: \`$MULTISTRAP_CONFIG' does not" \
    "exist or is not readable by the script."
    exit 1
fi

cat >&1 <<EOF
This program will overwrite the following files if present:
  \`$HELPER_DIR/initrd'
  \`$HELPER_DIR/kernel'
  \`$HELPER_DIR/image'
  \`$HELPER_DIR/packages'
EOF

while [[ 1 ]]; do
    echo -n "Do you want to continue [y/N]? "
    if [ "x$NO_PROMPT" = "xyes" ]; then
        echo "y";
        break;
    fi

    read answer
    [ "$(echo -n "$answer" | tr [A-Z] [a-z])" = "y" ] && break
    if [ -z "$answer" -o "$(echo -n "$answer" | tr [A-Z] [a-z])" = "n" ]; then
        log_error "Abort."
        exit 1
    fi
done

rm -f "$HELPER_DIR/initrd" "$HELPER_DIR/kernel" "$HELPER_DIR/image"

echo -n "Allocating space for helper disk image..."
helper_img=$(mktemp "$HELPER_DIR/image.XXXXXX")
add_cleanup rm -f "$helper_img"
truncate -s 2G "$helper_img"
echo "done"

echo Creating and configuring filesystem...
mkfs.ext4 -F "$helper_img" 2>&1 | sed -e 's/^/MKFS.EXT2: /g'
# The helper vm should never do file system checks...
tune2fs -i 0 -c 0 "$helper_img" 2>&1 | sed -e 's/^/TUNE2FS: /g'

root_uuid=$(blkid -s UUID -o value "$helper_img")

target=$(mktemp -d)
add_cleanup rmdir "$target"

mount "$helper_img" "$target"
add_cleanup ignore_failure umount "$target"

do_multistrap "$target"

echo "Installing snf-image-helper pkg in the new image..."
cp "$HELPER_PKG" "$target/tmp/"
pkg_name=$(basename "$HELPER_PKG")
chroot "$target" dpkg -i "/tmp/$pkg_name" 2>&1 | sed -e 's/^/DPKG: /g'
rm "$target/tmp/$pkg_name"

# Save the package list
chroot "$target" dpkg-query -W  > "$HELPER_DIR/packages"

echo -n "Configuring the helper image..."
echo snf-image-helper > "$target/etc/hostname"

cat > "$target/etc/fstab" <<EOF
# /etc/fstab: static file system information.
#
# <file system>   <mount point>   <type>  <options>       <dump>  <pass>
UUID=$root_uuid         /               ext4    defaults        0       1
proc              /proc           proc    defaults        0       0
EOF

# We need this since we mount the helper VM ro
ln -sf /proc/mounts "$target/etc/mtab"

echo "done"

echo -n "Extracting kernel..."
if [ ! -L "$target/vmlinuz" -o ! -L "$target/initrd.img" ]; then
    echo -e "\033[1;31mfailed\033[0m"
    log_error "vmlinuz or initrd.img link in root is missing."
    log_error "I don't know how to find a usable kernel/initrd pair."
    exit 1
fi
echo "done"

kernel="$target/$(chroot "$target" readlink -f /vmlinuz)"
initrd="$target/$(chroot "$target" readlink -f /initrd.img)"

echo "Moving $(basename "$kernel") and $(basename "$initrd") to \`$HELPER_DIR'"
cp "$kernel" "$initrd" "$HELPER_DIR"

kernel=$(basename "$kernel")
initrd=$(basename "$initrd")

umount "$target"

ln -sf "$kernel" "$HELPER_DIR/kernel"
ln -sf "$initrd" "$HELPER_DIR/initrd"

if [ "$NO_SHRINK" != yes ]; then
    echo "Shrinking the created image:" >&2
    set +e
    e2fsck -y -f "$helper_img" 2>&1 | sed -u -e 's/^/E2FSCK: /g'
    ret=$?
    set -e

    if [ $ret -ge 4 ]; then
        log_error "File system check failed!"
    fi

    resize2fs -M "$helper_img" 2>&1 2>&1 | sed -u -e 's/^/RESIZE2FS: /g'

    while read line; do
        value="$(echo $(cut -d: -f2 <<< "$line"))"
        if grep '^Block size:' <<< "$line" &> /dev/null; then
            block_size="$value"
        elif grep '^Block count:' <<< "$line" &> /dev/null; then
            block_count="$value"
        fi
    done <<< "$(tune2fs -l "$helper_img")"

    truncate -s $((block_size*block_count)) "$helper_img"
fi

mv "$helper_img" "$HELPER_DIR/image"

echo "$SNF_IMAGE_VERSION" > "$HELPER_DIR/version"

echo "Files in \`$HELPER_DIR' were updated successfully" >&2

exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
