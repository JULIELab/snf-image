# Copyright (C) 2011 GRNET S.A. 
# Copyright (C) 2007, 2008, 2009 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

AWK="awk"
KPARTX="kpartx"
LOSETUP="losetup"
SFDISK="sfdisk"
QEMU_IMG="qemu-img"
INSTALL_MBR="install-mbr"
TIMELIMIT="timelimit"
CURL="curl"
PROGRESS_MONITOR="snf-progress-monitor"

progress_monitor_support="@progress_monitor_support@"

CLEANUP=( )

add_cleanup() {
    local cmd=""
    for arg; do cmd+=$(printf "%q " "$arg"); done
    CLEANUP+=("$cmd")
}

log_error() {
    echo "$@" >&2
}

get_api5_arguments() {
    GETOPT_RESULT=$*
    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$GETOPT_RESULT"
    while true; do
        case "$1" in
            -i|-n) instance=$2; shift 2;;

            -o) old_name=$2; shift 2;;

            -b) blockdev=$2; shift 2;;

            -s) swapdev=$2; shift 2;;

            --) shift; break;;

            *)  log_error "Internal error!" >&2; exit 1;;
        esac
    done
    if [ -z "$instance" -o -z "$blockdev" ]; then
        log_error "Missing OS API Argument (-i, -n, or -b)"
        exit 1
    fi
    if [ "$SCRIPT_NAME" != "export" -a -z "$swapdev"  ]; then
        log_error "Missing OS API Argument -s (swapdev)"
        exit 1
    fi
    if [ "$SCRIPT_NAME" = "rename" -a -z "$old_name"  ]; then
        log_error "Missing OS API Argument -o (old_name)"
        exit 1
    fi
}

get_api10_arguments() {
    if [ -z "$INSTANCE_NAME" -o -z "$HYPERVISOR" -o -z "$DISK_COUNT" ]; then
        log_error "Missing OS API Variable:"
        log_error "(INSTANCE_NAME HYPERVISOR or DISK_COUNT)"
        exit 1
    fi
    instance=$INSTANCE_NAME
    if [ $DISK_COUNT -lt 1 -o -z "$DISK_0_PATH" ]; then
        log_error "At least one disk is needed"
        exit 1
    fi
    if [ "$SCRIPT_NAME" = "export" ]; then
        if [ -z "$EXPORT_DEVICE" ]; then
        log_error "Missing OS API Variable EXPORT_DEVICE"
    fi
    blockdev=$EXPORT_DEVICE
    elif [ "$SCRIPT_NAME" = "import" ]; then
        if [ -z "$IMPORT_DEVICE" ]; then
        log_error "Missing OS API Variable IMPORT_DEVICE"
        fi
        blockdev=$IMPORT_DEVICE
    else
        blockdev=$DISK_0_PATH
    fi
    if [ "$SCRIPT_NAME" = "rename" -a -z "$OLD_INSTANCE_NAME" ]; then
        log_error "Missing OS API Variable OLD_INSTANCE_NAME"
    fi
    old_name=$OLD_INSTANCE_NAME
}

get_api20_arguments() {
    get_api10_arguments
    if [ -z "$OSP_IMG_ID" ]; then
        log_error "Missing OS API Parameter: OSP_IMG_ID"
        exit 1
    fi
    if [ -z "$OSP_IMG_FORMAT" ]; then
        log_error "Missing OS API Parameter: OSP_IMG_FORMAT"
        exit 1
    fi
    if [ -z "$OSP_IMG_PASSWD" ]; then
        log_error "Missing OS API Parameter: OSP_IMG_PASSWD"
        exit 1
    fi

    IMG_ID=$OSP_IMG_ID
    IMG_FORMAT=$OSP_IMG_FORMAT
    IMG_PASSWD=$OSP_IMG_PASSWD
    if [ -n "$OSP_IMG_PROPERTIES" ]; then
        IMG_PROPERTIES="$OSP_IMG_PROPERTIES"
    fi
    if [ -n "$OSP_IMG_PERSONALITY" ]; then
        IMG_PERSONALITY="$OSP_IMG_PERSONALITY"
    fi
}

map_disk0() {
    blockdev="$1"
    filesystem_dev_base=$($KPARTX -l -p- $blockdev | \
                            grep -m 1 -- "-1.*$blockdev" | \
                            $AWK '{print $1}')
    if [ -z "$filesystem_dev_base" ]; then
        log_error "Cannot interpret kpartx output and get partition mapping"
        exit 1
    fi
    $KPARTX -a -p- "$blockdev" > /dev/null
    filesystem_dev="/dev/mapper/${filesystem_dev_base/%-1/}"
    if [ ! -b "/dev/mapper/$filesystem_dev_base" ]; then
        log_error "Can't find kpartx mapped partition:" \
                                            "/dev/mapper/$filesystem_dev_base"
        exit 1
    fi
    echo "$filesystem_dev"
}

unmap_disk0() {
    $KPARTX -d -p- "$1"
}

format_disk0() {
    local device="$1"
    local image_type="$2"

    declare -A part_id=( ['extdump']="83" ["ntfsdump"]="7" )

    # The -f is needed, because we use an optimal alignment and sfdisk complains
    # about partitions not ending on clylinder boundary.
    local sfdisk_cmd="$SFDISK -uS -H 255 -S 63 -f --quiet --Linux --DOS $device"

    $sfdisk_cmd > /dev/null <<EOF
2048,,${part_id["$image_type"]},*
EOF
}

create_floppy() {
    local img=$1

    local target=$(mktemp -d)
    add_cleanup rmdir "$target"

    dd bs=512 count=2880 if=/dev/zero of="$img"
    mkfs.ext2 -F "$img" > /dev/null
    mount "$img" "$target" -o loop
    set | egrep ^snf_export_\\w+= | sed -e 's/^snf_export_/export SNF_IMAGE_/' \
        > "$target/rules"
    umount "$target"
}

# this one is only to be called by create
ganeti_os_main() {
    if [ -z "$OS_API_VERSION" -o "$OS_API_VERSION" = "5" ]; then
        OS_API_VERSION=5
        GETOPT_RESULT=`getopt -o o:n:i:b:s: -n '$0' -- "$@"`
        if [ $? != 0 ] ; then log_error "Terminating..."; exit 1 ; fi
        get_api5_arguments $GETOPT_RESULT
    elif [ "$OS_API_VERSION" = "10" -o "$OS_API_VERSION" = "15" ]; then
        get_api10_arguments
    elif [ "$OS_API_VERSION" = "20" ]; then
        get_api20_arguments
        IMAGE_NAME=$IMG_ID
        IMAGE_TYPE=$IMG_FORMAT
    else
        log_error "Unknown OS API VERSION $OS_API_VERSION"
        exit 1
    fi
    
    if [ -n "$OS_VARIANT" ]; then
        if [ ! -d "$VARIANTS_DIR" ]; then
            log_error "OS Variants directory $VARIANTS_DIR doesn't exist"
            exit 1
        fi
        VARIANT_CONFIG="$VARIANTS_DIR/$OS_VARIANT.conf"
        if [ -f "$VARIANT_CONFIG" ]; then
            . "$VARIANT_CONFIG"
        else
            if grep -qxF "$OS_VARIANT" variants.list; then
                log_error "ERROR: instance-image configuration error"
                log_error "  Published variant $OS_VARIANT is missing its" \
                    "config file"
                log_error "  Please create $VARIANT_CONFIG or unpublish the" \
                    "variant"
                log_error "  (by removing $OS_VARIANT from variants.list)"
            else
                log_error "Unofficial variant $OS_VARIANT is unsupported"
                log_error "Most probably this is a user error, forcing a" \
                    "wrong name"
                log_error "To support this variant please create file" \
                    "$VARIANT_CONFIG"
            fi
            exit 1
        fi
    fi

}

cleanup() {
# if something fails here, it souldn't call cleanup again...
    trap - EXIT
    if [ ${#CLEANUP[*]} -gt 0 ]; then
        LAST_ELEMENT=$((${#CLEANUP[*]}-1))
        REVERSE_INDEXES=$(seq ${LAST_ELEMENT} -1 0)
        for i in $REVERSE_INDEXES; do
            # If something fails here, it's better to retry it for a few times
            # before we give up with an error. This is needed for kpartx when
            # dealing with ntfs partitions mounted through fuse. umount is not
            # synchronous and may return while the partition is still busy. A
            # premature attempt to delete partition mappings through kpartx on a
            # device that hosts previously mounted ntfs partition may fail with
            # an  `device-mapper: remove ioctl failed: Device or resource busy'
            # error. A sensible workaround for this is to wait for a while and
            # then try again.
            local cmd=${CLEANUP[$i]}
            $cmd || for interval in 0.25 0.5 1 2 4; do
            echo "Command $cmd failed!"
            echo "I'll wait for $interval secs and will retry..."
            sleep $interval
            $cmd && break
        done
        if [ "$?" != "0" ]; then
            echo "Giving Up..."
            exit 1;
        fi
    done
  fi
}

trap cleanup EXIT

DEFAULT_FILE="@sysconfdir@/default/snf-image"
if [ -f "$DEFAULT_FILE" ]; then
    . "$DEFAULT_FILE"
fi

: ${VARIANTS_DIR:="@sysconfdir@/ganeti/snf-image/variants"}
: ${IMAGE_DIR:="@localstatedir@/lib/snf-image"}
: ${HELPER_DIR:="@HELPER_DIR@"}
: ${HELPER_IMG:="@HELPER_IMG@"}
: ${HELPER_KERNEL:="@HELPER_KERNEL@"}
: ${HELPER_INITRD:="@HELPER_INITRD@"}
: ${HELPER_PKG:="@HELPER_DIR@/snf-image-helper.deb"}
: ${HELPER_SOFT_TIMEOUT:=15}
: ${HELPER_HARD_TIMEOUT:=5}
: ${HELPER_USER:="nobody"}
: ${HELPER_CACHE_FILE:="@HELPER_DIR@/cache.tar"}
: ${HELPER_EXTRA_PKGS:="linux-image-amd64,e2fsprogs,ntfs-3g,ntfsprogs,xmlstarlet,python,parted,reglookup,chntpw"}
: ${HELPER_MIRROR:=""}


SCRIPT_NAME=$(basename $0)

if [ -f /sbin/blkid -a -x /sbin/blkid ]; then
    VOL_ID="/sbin/blkid -c /dev/null -o value -s UUID"
    VOL_TYPE="/sbin/blkid -c /dev/null -o value -s TYPE"
else
    for dir in /lib/udev /sbin; do
        if [ -f $dir/vol_id -a -x $dir/vol_id ]; then
            VOL_ID="$dir/vol_id -u"
            VOL_TYPE="$dir/vol_id -t"
        fi
    done
fi

if [ -z "$VOL_ID" ]; then
    log_error "vol_id or blkid not found, please install udev or util-linux"
    exit 1
fi

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
